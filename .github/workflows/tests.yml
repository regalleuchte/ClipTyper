name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test on macOS
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, macos-13]
        swift: ['5.9']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: ${{ matrix.swift }}
    
    - name: Show Swift version
      run: swift --version
    
    - name: Cache Swift dependencies
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-swift-${{ hashFiles('Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-swift-
    
    - name: Build
      run: swift build -c release
    
    - name: Run tests
      run: swift test --enable-code-coverage
    
    - name: Generate coverage report
      run: |
        xcrun llvm-cov export \
          .build/debug/ClipTyperPackageTests.xctest/Contents/MacOS/ClipTyperPackageTests \
          -instr-profile=.build/debug/codecov/default.profdata \
          -ignore-filename-regex=".build|Tests" \
          -format=lcov > coverage.lcov
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.lcov
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Run quick validation
      run: |
        chmod +x quick-validate.sh
        ./quick-validate.sh || true
    
    - name: Upload test results
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}
        path: |
          .build/debug/*.xctest
          test_output.log

  build-app:
    name: Build App Bundle
    runs-on: macos-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build app bundle
      run: |
        chmod +x build.sh
        ./build.sh
    
    - name: Verify app bundle
      run: |
        ls -la ClipTyper.app/Contents/
        file ClipTyper.app/Contents/MacOS/ClipTyper
        # Don't verify signature in CI as it won't be signed
    
    - name: Upload app bundle
      uses: actions/upload-artifact@v3
      with:
        name: ClipTyper.app
        path: ClipTyper.app

  lint:
    name: Code Quality
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # SwiftLint would go here if you use it
    # - name: Run SwiftLint
    #   run: swiftlint
    
    - name: Check for common issues
      run: |
        # Check for force unwrapping
        echo "Checking for force unwrapping..."
        if grep -r "!" Sources/ --include="*.swift" | grep -v "!=" | grep -v "// swiftlint:disable"; then
          echo "::warning::Force unwrapping found in code"
        fi
        
        # Check for print statements
        echo "Checking for debug print statements..."
        if grep -r "print(" Sources/ --include="*.swift" | grep -v "// DEBUG"; then
          echo "::warning::Debug print statements found"
        fi
    
    - name: Check documentation
      run: |
        required_files=("README.md" "LICENSE" "TESTING_STRATEGY.md")
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "::error::Missing required documentation: $file"
            exit 1
          fi
        done 